//
// Created by Alex Powers on 21-02-2019.
//
// https://itk.org/Doxygen/html/classitk_1_1SmoothingRecursiveGaussianImageFilter.html

#include "DOGCLP.h" // <-- NOTE THIS FILE WAS AUTO GENERATED by GENERATECLP()

// ITK Imports
#include "itkImage.h"
#include "itkImageFileReader.h"
#include "itkImageFileWriter.h"
#include "itkSubtractImageFilter.h"
#include "itkRecursiveGaussianImageFilter.h"


int main(int argc, char *argv[]) {
    PARSE_ARGS;

    std::cout << "The input volume is: " << inputVolume << std::endl;
    std::cout << "The output volume is: " << outputVolume << std::endl;
    std::cout << "The sigma one value is: " << sigmaOne << std::endl;
    std::cout << "The sigma two value is: " << sigmaTwo << std::endl;


    // define dimension
    constexpr unsigned int dimension = 3;


    // define input image type
    using InputPixelType = unsigned char;
    using InputImageType = itk::Image<InputPixelType, dimension>;

    // define output image type
    using OutputPixelType =  unsigned char;
    using OutputImageType = itk::Image<OutputPixelType, dimension>;

    // define reader
    using ReaderType = itk::ImageFileReader<InputImageType>;
    typename ReaderType::Pointer reader = ReaderType::New();
    // set reader filename
    reader->SetFileName(inputVolume);

    // define blur filter one
    using BlurFilterType = itk::RecursiveGaussianImageFilter<InputImageType, OutputImageType>;
    typename BlurFilterType::Pointer filterOne = BlurFilterType::New();
    // define filter parameters
    filterOne->SetSigma(sigmaOne);
    filterOne->SetInput(reader->GetOutput());

    // define blur filter two
    typename BlurFilterType::Pointer filterTwo = BlurFilterType::New();
    // define filter parameters
    filterTwo->SetSigma(sigmaTwo);
    filterTwo->SetInput(reader->GetOutput());

    // define subtract image filter
    using SubtractFilterType = itk::SubtractImageFilter<InputImageType, OutputImageType>;
    typename SubtractFilterType::Pointer subtract = SubtractFilterType::New();
    subtract->SetInput1(filterOne->GetOutput());
    subtract->SetInput2(filterTwo->GetOutput());


    // define writer
    using WriterType = itk::ImageFileWriter<OutputImageType>;
    typename WriterType::Pointer writer = WriterType::New();

    // set writer output name
    writer->SetFileName(outputVolume);
    // link filter output to writer input
    writer->SetInput(subtract->GetOutput());

    try {
        writer->Update();
    }
    catch (itk::ExceptionObject &err) {
        std::cerr << "EXCEPTION! OH MY!" << std::endl;
        std::cerr << err << std::endl;
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}